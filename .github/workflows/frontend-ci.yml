name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'

jobs:
  test:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/app/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend/app
          npm ci
      
      - name: Run type checking
        run: |
          cd frontend/app
          npm run type-check
      
      - name: Run linting
        run: |
          cd frontend/app
          npm run lint
      
      - name: Run unit tests
        run: |
          cd frontend/app
          npm run test
        env:
          NODE_ENV: test
      
      - name: Run test coverage
        run: |
          cd frontend/app
          npm run test:coverage
        env:
          NODE_ENV: test
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/app/coverage
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/app/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend/app
          npm ci
      
      - name: Build application
        run: |
          cd frontend/app
          npm run build
        env:
          NODE_ENV: production
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/app/dist
          retention-days: 7

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/app/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend/app
          npm ci
      
      - name: Install Playwright Browsers
        run: |
          cd frontend/app
          npx playwright install --with-deps
      
      - name: Run Playwright tests
        run: |
          cd frontend/app
          npm run test:e2e
        env:
          NODE_ENV: test
      
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.sha }}
          path: frontend/app/playwright-report/
          retention-days: 7

  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/app/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend/app
          npm ci
      
      - name: Build application
        run: |
          cd frontend/app
          npm run build
      
      - name: Serve application
        run: |
          cd frontend/app
          npm run preview &
          sleep 10
      
      - name: Run axe accessibility tests
        run: |
          cd frontend/app
          npx axe http://localhost:3000 --exit

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/app/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend/app
          npm ci
      
      - name: Run security audit
        run: |
          cd frontend/app
          npm audit --audit-level high
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, build, e2e-tests, accessibility]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: github.event_name != 'pull_request'
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: beepmyphone/frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max